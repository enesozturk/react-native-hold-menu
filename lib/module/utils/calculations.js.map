{"version":3,"sources":["calculations.ts"],"names":["styleGuide","MENU_WIDTH","MENU_TRANSFORM_ORIGIN_TOLERENCE","FONT_SCALE","MenuItemHeight","typography","callout","lineHeight","spacing","calculateMenuHeight","itemLength","separatorCount","menuAnimationAnchor","anchorPoint","itemWidth","itemsWithSeparatorLength","MenuHeight","splittetAnchorName","split","Center1","Center2","TyTop1","TyTop2","TxLeft1","TxLeft2","beginningTransformations","translateX","translateY","endingTransformations","getTransformOrigin","posX","windowWidth","bottom","distanceToLeft","Math","round","distanceToRight","position","majority","abs"],"mappings":"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","sourcesContent":["import styleGuide from '../styleGuide';\nimport {\n  MENU_WIDTH,\n  MENU_TRANSFORM_ORIGIN_TOLERENCE,\n  FONT_SCALE,\n} from '../constants';\n\nexport const MenuItemHeight = () => {\n  'worklet';\n  return (\n    styleGuide.typography.callout.lineHeight * FONT_SCALE +\n    styleGuide.spacing * 2.5\n  );\n};\n\nexport const calculateMenuHeight = (\n  itemLength: number,\n  separatorCount: number\n) => {\n  'worklet';\n  return (\n    MenuItemHeight() * itemLength +\n    (itemLength - 1) +\n    separatorCount * styleGuide.spacing\n  );\n};\n\nexport type TransformOriginAnchorPosition =\n  | 'top-right'\n  | 'top-left'\n  | 'top-center'\n  | 'bottom-right'\n  | 'bottom-left'\n  | 'bottom-center';\n\nexport const menuAnimationAnchor = (\n  anchorPoint: TransformOriginAnchorPosition,\n  itemWidth: number,\n  itemLength: number,\n  itemsWithSeparatorLength: number\n) => {\n  'worklet';\n  const MenuHeight = calculateMenuHeight(itemLength, itemsWithSeparatorLength);\n  const splittetAnchorName: string[] = anchorPoint.split('-');\n\n  const Center1 = itemWidth;\n  const Center2 = 0;\n\n  const TyTop1 = -(MenuHeight / 2);\n  const TyTop2 = MenuHeight / 2;\n\n  const TxLeft1 = (MENU_WIDTH / 2) * -1;\n  const TxLeft2 = (MENU_WIDTH / 2) * 1;\n\n  return {\n    beginningTransformations: {\n      translateX:\n        splittetAnchorName[1] === 'right'\n          ? -TxLeft1\n          : splittetAnchorName[1] === 'left'\n          ? TxLeft1\n          : Center1,\n      translateY:\n        splittetAnchorName[0] === 'top'\n          ? TyTop1\n          : splittetAnchorName[0] === 'bottom'\n          ? TyTop1\n          : Center2,\n    },\n    endingTransformations: {\n      translateX:\n        splittetAnchorName[1] === 'right'\n          ? -TxLeft2\n          : splittetAnchorName[1] === 'left'\n          ? TxLeft2\n          : Center2,\n      translateY:\n        splittetAnchorName[0] === 'top'\n          ? TyTop2\n          : splittetAnchorName[0] === 'bottom'\n          ? -TyTop2\n          : Center2,\n    },\n  };\n};\n\nexport const getTransformOrigin = (\n  posX: number,\n  itemWidth: number,\n  windowWidth: number,\n  bottom?: boolean\n): TransformOriginAnchorPosition => {\n  'worklet';\n  const distanceToLeft = Math.round(posX + itemWidth / 2);\n  const distanceToRight = Math.round(windowWidth - distanceToLeft);\n\n  let position: TransformOriginAnchorPosition = bottom\n    ? 'bottom-right'\n    : 'top-right';\n\n  const majority = Math.abs(distanceToLeft - distanceToRight);\n\n  if (majority < MENU_TRANSFORM_ORIGIN_TOLERENCE) {\n    position = bottom ? 'bottom-center' : 'top-center';\n  } else if (distanceToLeft < distanceToRight) {\n    position = bottom ? 'bottom-left' : 'top-left';\n  }\n\n  return position;\n};\n"]}