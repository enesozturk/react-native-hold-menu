{"version":3,"sources":["MenuItem.tsx"],"names":["ItemComponent","IS_IOS","TouchableOpacity","GHTouchableOpacity","AnimatedTouchable","Animated","createAnimatedComponent","MenuItemComponent","item","isLast","state","theme","menuProps","opacity","borderStyles","borderBottomColor","value","BORDER_DARK_COLOR","BORDER_LIGHT_COLOR","borderBottomWidth","textColor","color","isTitle","isDestructive","handleOnPress","params","actionParams","text","onPress","CONTEXT_MENU_STATE","END","pressInStyle","styles","menuItem","menuItemTitleText","menuItemText","icon","withSeparator","MenuItem","React","memo","isEqual"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport { TouchableOpacity as GHTouchableOpacity } from 'react-native-gesture-handler';\nimport Animated, {\n  useAnimatedStyle,\n  useSharedValue,\n} from 'react-native-reanimated';\n\nimport Separator from './Separator';\nimport styles from './styles';\n\nimport { MenuItemProps } from './types';\nimport { useInternal } from '../../hooks';\nimport { CONTEXT_MENU_STATE, IS_IOS } from '../../constants';\nimport { BORDER_LIGHT_COLOR, BORDER_DARK_COLOR } from './constants';\nimport isEqual from 'lodash.isequal';\nimport { getColor } from './calculations';\nimport { AnimatedIcon } from '../provider/Provider';\n\nconst ItemComponent = IS_IOS ? TouchableOpacity : GHTouchableOpacity;\nconst AnimatedTouchable = Animated.createAnimatedComponent(ItemComponent);\n\ntype MenuItemComponentProps = {\n  item: MenuItemProps;\n  isLast?: boolean;\n};\n\nconst MenuItemComponent = ({ item, isLast }: MenuItemComponentProps) => {\n  const { state, theme, menuProps } = useInternal();\n  const opacity = useSharedValue(1);\n\n  const borderStyles = useAnimatedStyle(() => {\n    const borderBottomColor =\n      theme.value === 'dark' ? BORDER_DARK_COLOR : BORDER_LIGHT_COLOR;\n\n    return {\n      borderBottomColor,\n      borderBottomWidth: isLast ? 0 : 1,\n    };\n  }, [theme, isLast, item]);\n\n  const textColor = useAnimatedStyle(() => {\n    return { color: getColor(item.isTitle, item.isDestructive, theme.value) };\n  }, [theme, item]);\n\n  const handleOnPress = useCallback(() => {\n    if (!item.isTitle) {\n      const params = menuProps.value.actionParams[item.text] || [];\n      if (item.onPress) item.onPress(...params);\n      state.value = CONTEXT_MENU_STATE.END;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state, item]);\n\n  const pressInStyle = useAnimatedStyle(() => {\n    return {\n      opacity: opacity.value,\n    };\n  });\n\n  return (\n    <>\n      <AnimatedTouchable\n        onPressIn={() => (opacity.value = 0.4)}\n        onPressOut={() => (opacity.value = 1)}\n        onPress={handleOnPress}\n        activeOpacity={!item.isTitle ? 0.4 : 1}\n        style={[styles.menuItem, borderStyles, pressInStyle]}\n      >\n        <Animated.Text\n          style={[\n            item.isTitle ? styles.menuItemTitleText : styles.menuItemText,\n            textColor,\n          ]}\n        >\n          {item.text}\n        </Animated.Text>\n        {!item.isTitle && item.icon && (\n          <AnimatedIcon name={item.icon} size={18} style={textColor} />\n        )}\n      </AnimatedTouchable>\n      {item.withSeparator && <Separator />}\n    </>\n  );\n};\n\nconst MenuItem = React.memo(MenuItemComponent, isEqual);\nexport default MenuItem;\n"]}